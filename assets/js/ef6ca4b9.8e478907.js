"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9447],{5678:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"detectors/soroban/unnecesary-admin-parameter","title":"Unnecessary admin parameter","description":"Description","source":"@site/docs/detectors/soroban/26-unnecesary-admin-parameter.md","sourceDirName":"detectors/soroban","slug":"/detectors/soroban/unnecesary-admin-parameter","permalink":"/scout-audit/docs/detectors/soroban/unnecesary-admin-parameter","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/soroban/26-unnecesary-admin-parameter.md","tags":[],"version":"current","sidebarPosition":26,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Dynamic types in storage","permalink":"/scout-audit/docs/detectors/soroban/dynamic-instance-storage"},"next":{"title":"Substrate Pallets","permalink":"/scout-audit/docs/category/substrate-pallets"}}');var t=a(5105),r=a(7890);const i={},d="Unnecessary admin parameter",c={},o=[{value:"Description",id:"description",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Issue example",id:"issue-example",level:2},{value:"Remediated example",id:"remediated-example",level:2},{value:"How is it detected?",id:"how-is-it-detected",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"unnecessary-admin-parameter",children:"Unnecessary admin parameter"})}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Category: ",(0,t.jsx)(n.code,{children:"Access control"})]}),"\n",(0,t.jsxs)(n.li,{children:["Severity: ",(0,t.jsx)(n.code,{children:"Medium"})]}),"\n",(0,t.jsxs)(n.li,{children:["Detector: ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/unnecessary-admin-parameter",children:(0,t.jsx)(n.code,{children:"unnecessary-admin-parameter"})})]}),"\n",(0,t.jsxs)(n.li,{children:["Test Cases: ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unnecessary-admin-parameter/unnecessary-admin-parameter-1",children:(0,t.jsx)(n.code,{children:"unnecessary-admin-parameter-1"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:['In Rust, it is considered bad practice to pass variables with names like "admin" as parameters in ',(0,t.jsx)(n.code,{children:"require_auth"})," calls within contract functions. Ideally, admin information should be retrieved directly from storage to prevent security vulnerabilities."]}),"\n",(0,t.jsx)(n.h2,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,t.jsx)(n.p,{children:"Passing admin information as a parameter can introduce security risks, as the value could be manipulated, leading to incorrect authentication verification."}),"\n",(0,t.jsx)(n.h2,{id:"issue-example",children:"Issue example"}),"\n",(0,t.jsx)(n.p,{children:"Consider the following function:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"\n  pub fn set_admin(env: Env, new_admin: Address, admin: Address) {\n        admin.require_auth();\n        env.storage().instance().set(&DataKey::Admin, &new_admin);\n    }\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example the admin is being passed as a parameter and then validated with ",(0,t.jsx)(n.code,{children:"require_auth"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The code example can be found ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unnecessary-admin-parameter/unnecessary-admin-parameter-1/vulnerable-example",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"remediated-example",children:"Remediated example"}),"\n",(0,t.jsx)(n.p,{children:"Consider the following function:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"\n pub fn set_admin(env: Env, new_admin: Address) {\n        // Initialize has already set the admin, so we can retrieve it directly.\n        let current_admin: Address = env.storage().instance().get(&DataKey::Admin).unwrap();\n        current_admin.require_auth();\n        env.storage().instance().set(&DataKey::Admin, &new_admin);\n    }\n        \n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, the admin information is retrieved directly from storage and then validated with ",(0,t.jsx)(n.code,{children:"require_auth"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The remediated code example can be found ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unnecessary-admin-parameter/unnecessary-admin-parameter-1/remediated-example",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"how-is-it-detected",children:"How is it detected?"}),"\n",(0,t.jsx)(n.p,{children:'Checks the use of function parameters with names similar to "admin."'})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},7890:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>d});var s=a(8101);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);