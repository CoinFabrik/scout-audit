"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1315],{2583:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"detectors/substrate/overflow-check","title":"Overflow-check","description":"Description","source":"@site/docs/detectors/substrate/overflow-check.md","sourceDirName":"detectors/substrate","slug":"/detectors/substrate/overflow-check","permalink":"/scout-audit/docs/detectors/substrate/overflow-check","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/substrate/overflow-check.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Known vulnerabilities","permalink":"/scout-audit/docs/detectors/substrate/known-vulnerabilities"},"next":{"title":"Saturating arithmetic","permalink":"/scout-audit/docs/detectors/substrate/saturating-arithmetic"}}');var r=n(5105),c=n(7890);const o={},a="Overflow-check",i={},l=[{value:"Description",id:"description",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"overflow-check",children:"Overflow-check"})}),"\n",(0,r.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Category: ",(0,r.jsx)(t.code,{children:"Arithmetic"})]}),"\n",(0,r.jsxs)(t.li,{children:["Severity: ",(0,r.jsx)(t.code,{children:"Critical"})]}),"\n",(0,r.jsxs)(t.li,{children:["Detectors: ",(0,r.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout-audit/blob/main/detectors/rust/overflow-check/src/lib.rs",children:(0,r.jsx)(t.code,{children:"overflow-check"})})]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Checks that ",(0,r.jsx)(t.code,{children:"overflow-checks"})," is enabled in the ",(0,r.jsx)(t.code,{children:"[profile.release]"})," section of the ",(0,r.jsx)(t.code,{children:"Cargo.toml"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,r.jsx)(t.p,{children:"Integer overflow will trigger a panic in debug builds or will wrap in\nrelease mode. Division by zero will cause a panic in either mode. In some applications one\nwants explicitly checked, wrapping or saturating arithmetic."}),"\n",(0,r.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",children:'\n[package]\nedition = "2021"\nname = "overflow-check-vulnerable-1"\nversion = "0.1.0"\n\n[package.metadata.docs.rs]\ntargets = ["x86_64-unknown-linux-gnu"]\n\n[dependencies]\ncodec = { workspace = true }\nframe-support = { workspace = true }\nframe-system = { workspace = true }\nlog = { workspace = true }\npallet-balances = { workspace = true }\nscale-info = { features = ["derive"], workspace = true }\nsp-io = { workspace = true }\nsp-runtime = { workspace = true }\n\n[dev-dependencies]\nsp-core = { workspace = true }\n\n[features]\ndefault = ["std"]\nstd = [\n\t"codec/std",\n\t"frame-support/std",\n\t"frame-system/std",\n\t"log/std",\n\t"pallet-balances/std",\n\t"scale-info/std",\n\t"sp-core/std",\n\t"sp-io/std",\n\t"sp-runtime/std",\n]\n\n'})}),"\n",(0,r.jsx)(t.p,{children:"Use instead:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",children:'\n[package]\nedition = "2021"\nname = "overflow-check-remediated-1"\nversion = "0.1.0"\n\n[package.metadata.docs.rs]\ntargets = ["x86_64-unknown-linux-gnu"]\n\n[dependencies]\ncodec = { workspace = true }\nframe-support = { workspace = true }\nframe-system = { workspace = true }\nlog = { workspace = true }\npallet-balances = { workspace = true }\nscale-info = { features = ["derive"], workspace = true }\nsp-io = { workspace = true }\nsp-runtime = { workspace = true }\n\n[dev-dependencies]\nsp-core = { workspace = true }\n\n[features]\ndefault = ["std"]\nstd = [\n\t"codec/std",\n\t"frame-support/std",\n\t"frame-system/std",\n\t"log/std",\n\t"pallet-balances/std",\n\t"scale-info/std",\n\t"sp-core/std",\n\t"sp-io/std",\n\t"sp-runtime/std",\n]\n[profile.release]\ncodegen-units = 1\ndebug = 0\ndebug-assertions = false\nlto = true\nopt-level = "z"\noverflow-checks = false\npanic = "abort"\nstrip = "symbols"\n'})}),"\n",(0,r.jsx)(t.h3,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsxs)(t.p,{children:["The detector's implementation can be found at ",(0,r.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/overflow-check",children:"this link"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},7890:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(8101);const r={},c=s.createContext(r);function o(e){const t=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(c.Provider,{value:t},e.children)}}}]);