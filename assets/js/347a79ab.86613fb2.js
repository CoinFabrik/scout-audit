"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[475],{2839:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"precision-and-recall/substrate-second-evaluation","title":"Scout on Substrate: Second precision report","description":"February, 2025.","source":"@site/docs/precision-and-recall/substrate-second-evaluation.md","sourceDirName":"precision-and-recall","slug":"/precision-and-recall/substrate-second-evaluation","permalink":"/scout-audit/docs/precision-and-recall/substrate-second-evaluation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/precision-and-recall/substrate-second-evaluation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Scout on Substrate: First precision report","permalink":"/scout-audit/docs/precision-and-recall/substrate-first-evaluation"}}');var i=n(5105),r=n(3881);const o={},d="Scout on Substrate: Second precision report",c={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Methodology",id:"methodology",level:2},{value:"Results",id:"results",level:2},{value:"Detectors refinement",id:"detectors-refinement",level:2},{value:"Integer overflow or underflow",id:"integer-overflow-or-underflow",level:3},{value:"Saturating arithmetic",id:"saturating-arithmetic",level:3},{value:"Inconsistent extrinsic weight name",id:"inconsistent-extrinsic-weight-name",level:3},{value:"Unsafe expect",id:"unsafe-expect",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"scout-on-substrate-second-precision-report",children:"Scout on Substrate: Second precision report"})}),"\n",(0,i.jsx)(t.p,{children:"February, 2025."}),"\n",(0,i.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(t.p,{children:"As part of the fourth milestone of our initiative to develop the Scout static analyzer for Substrate, we aimed to evaluate the precision of Scout\u2019s detectors. To achieve this, we ran Scout on nine pallets from randomly selected Substrate projects with active support. The results were analyzed within a time-constrained sprint of five days by one of CoinFabrik\u2019s senior security auditors to assess the quality of Scout\u2019s output in terms of precision. This assessment provides a snapshot of the tool\u2019s current performance and helps identify areas for improving the detectors."}),"\n",(0,i.jsx)(t.h2,{id:"methodology",children:"Methodology"}),"\n",(0,i.jsx)(t.p,{children:"This was an exploratory study, meaning that the issues that would be reported by Scout were completely unknown to us. This allowed us to work on a non-biased set of results, running the tool on real projects and mimicking as much as possible the conditions that any Scout user will encounter. Given this, the analysis was restricted to the detectors triggered by Scout."}),"\n",(0,i.jsx)(t.h2,{id:"results",children:"Results"}),"\n",(0,i.jsx)(t.p,{children:"Out of the 17 detectors available by the time of this analysis -Scout Audit version 0.3.4- 7 detectors were triggered and 92 different issues were found. After a thorough evaluation of each of the results, our security auditor concluded that 61 of them were true positives, which represents a precision rate of 66.3%."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Detector"})}),(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Findings"})}),(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"True positives"})}),(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"False positives"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"assert-violation"}),(0,i.jsx)(t.td,{children:"5"}),(0,i.jsx)(t.td,{children:"5"}),(0,i.jsx)(t.td,{children:"0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"avoid-dispatch-error-other"}),(0,i.jsx)(t.td,{children:"3"}),(0,i.jsx)(t.td,{children:"3"}),(0,i.jsx)(t.td,{children:"0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"integer-overflow-or-underflow"}),(0,i.jsx)(t.td,{children:"12"}),(0,i.jsx)(t.td,{children:"1"}),(0,i.jsx)(t.td,{children:"11"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"invalid-extrinsic-weight"}),(0,i.jsx)(t.td,{children:"11"}),(0,i.jsx)(t.td,{children:"0"}),(0,i.jsx)(t.td,{children:"11"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"known-vulnerabilities"}),(0,i.jsx)(t.td,{children:"9"}),(0,i.jsx)(t.td,{children:"9"}),(0,i.jsx)(t.td,{children:"0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"overflow-check"}),(0,i.jsx)(t.td,{children:"7"}),(0,i.jsx)(t.td,{children:"7"}),(0,i.jsx)(t.td,{children:"0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"saturating-arithmetic"}),(0,i.jsx)(t.td,{children:"41"}),(0,i.jsx)(t.td,{children:"32"}),(0,i.jsx)(t.td,{children:"9"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"unsafe-expect"}),(0,i.jsx)(t.td,{children:"4"}),(0,i.jsx)(t.td,{children:"4"}),(0,i.jsx)(t.td,{children:"0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Total"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"92"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"61"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"31"})})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"detectors-refinement",children:"Detectors refinement"}),"\n",(0,i.jsx)(t.p,{children:"After our first Scout on Substrate precision evaluation, and after analyzing the issues while working on this report, Scout\u2019s development team concluded that some actions could be taken to improve the quality of the detectors with higher false positives rate."}),"\n",(0,i.jsx)(t.p,{children:"Below is the description of the modifications implemented on 4 detectors."}),"\n",(0,i.jsx)(t.h3,{id:"integer-overflow-or-underflow",children:"Integer overflow or underflow"}),"\n",(0,i.jsxs)(t.p,{children:["Improved safety-context system for detecting potential overflow in subtraction and division. This system analyzes ",(0,i.jsx)(t.code,{children:"if"})," statements and their conditions to determine whether a subtraction or division operation is safe before execution. For example, the following code would have previously thrown a warning:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"if a >= b {\n    let result = a - b;\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["But subtracting ",(0,i.jsx)(t.code,{children:"b"})," from ",(0,i.jsx)(t.code,{children:"a"})," is actually safe."]}),"\n",(0,i.jsx)(t.h3,{id:"saturating-arithmetic",children:"Saturating arithmetic"}),"\n",(0,i.jsx)(t.p,{children:"This detector was triggering false positives in code generated by Substrate macros."}),"\n",(0,i.jsx)(t.h3,{id:"inconsistent-extrinsic-weight-name",children:"Inconsistent extrinsic weight name"}),"\n",(0,i.jsx)(t.p,{children:"Improved false positive rates in cases where an extrinsic defines its weight inline with an expression, as well as when a single weight function is used in multiple extrinsics with different arguments. For example of the former,"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"#[pallet::weight(<T as Config>::WeightInfo::bar(2) * 3)]\npub fn foo(/*...*/) -> DispatchResult\n"})}),"\n",(0,i.jsx)(t.p,{children:"And of the latter,"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"#[pallet::weight(<T as Config>::WeightInfo::foo(FOO_VALUE))]\npub fn foo(/*...*/) -> DispatchResult\n\n//...\n\n#[pallet::weight(<T as Config>::WeightInfo::foo(BAR_VALUE))]\npub fn bar(/*...*/) -> DispatchResult\n"})}),"\n",(0,i.jsx)(t.h3,{id:"unsafe-expect",children:"Unsafe expect"}),"\n",(0,i.jsxs)(t.p,{children:["The detector now includes an arithmetic safety checker for ",(0,i.jsx)(t.code,{children:"expect"})," methods used in arithmetic operations. It analyzes ",(0,i.jsx)(t.code,{children:"if"})," statements to determine whether the conditions ensure a safe subtraction or division. Previously, the detector would issue a warning in the following scenario:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:'if a >= b {\n    let result = a.checked_sub(b).expect("Subtraction underflow should be prevented by the condition");\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Now, there is no warning when subtraction happens on known operations."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},3881:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>d});var s=n(8101);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);