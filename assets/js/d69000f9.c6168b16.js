"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6689],{3881:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var n=s(8101);const r={},a=n.createContext(r);function i(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(a.Provider,{value:t},e.children)}},4050:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"detectors/ink/assert-violation","title":"Assert violation","description":"What it does","source":"@site/docs/detectors/ink/15-assert-violation.md","sourceDirName":"detectors/ink","slug":"/detectors/ink/assert-violation","permalink":"/scout-audit/docs/detectors/ink/assert-violation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/ink/15-assert-violation.md","tags":[],"version":"current","sidebarPosition":15,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Unrestricted Transfer From","permalink":"/scout-audit/docs/detectors/ink/unrestricted-transfer-from"},"next":{"title":"Avoid core::mem::forget usage","permalink":"/scout-audit/docs/detectors/ink/avoid-core-mem-forget"}}');var r=s(5105),a=s(3881);const i={},o="Assert violation",c={},d=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"assert-violation",children:"Assert violation"})}),"\n",(0,r.jsx)(t.h3,{id:"what-it-does",children:"What it does"}),"\n",(0,r.jsxs)(t.p,{children:["Checks for ",(0,r.jsx)(t.code,{children:"assert!"})," macro usage."]}),"\n",(0,r.jsx)(t.h3,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"assert!"})," macro can cause the contract to panic."]}),"\n",(0,r.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:'    #[ink(message)]\n    pub fn assert_if_greater_than_10(&self, value: u128) -> bool {\n        assert!(value <= 10, "value should be less than 10");\n        true\n    }\n'})}),"\n",(0,r.jsx)(t.p,{children:"Use instead:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:'    #[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n    #[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\n    pub enum Error {\n        GreaterThan10,\n    }\n\n    #[ink(message)]\n    pub fn revert_if_greater_than_10(&self, value: u128) -> Result<bool, Error> {\n        if value <= 10 {\n            Ok(true)\n        } else {\n            Err(Error::GreaterThan10)\n        }\n    }\n'})}),"\n",(0,r.jsx)(t.h3,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsxs)(t.p,{children:["The detector's implementation can be found at ",(0,r.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout/tree/main/detectors/assert-violation",children:"this link"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);