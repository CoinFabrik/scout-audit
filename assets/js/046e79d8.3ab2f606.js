"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6040],{3774:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6672);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},5397:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"detectors/soroban/dynamic-instance-storage","title":"Dynamic types in storage","description":"Description","source":"@site/docs/detectors/soroban/25-dynamic-instance-storage.md","sourceDirName":"detectors/soroban","slug":"/detectors/soroban/dynamic-instance-storage","permalink":"/scout-audit/docs/detectors/soroban/dynamic-instance-storage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/soroban/25-dynamic-instance-storage.md","tags":[],"version":"current","sidebarPosition":25,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Front running","permalink":"/scout-audit/docs/detectors/soroban/front-running"},"next":{"title":"Unnecessary admin parameter","permalink":"/scout-audit/docs/detectors/soroban/unnecesary-admin-parameter"}}');var a=n(3420),i=n(3774);const r={},o="Dynamic types in storage",c={},d=[{value:"Description",id:"description",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Issue example",id:"issue-example",level:2},{value:"Remediated example",id:"remediated-example",level:2},{value:"How is it detected?",id:"how-is-it-detected",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"dynamic-types-in-storage",children:"Dynamic types in storage"})}),"\n",(0,a.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Category: ",(0,a.jsx)(t.code,{children:"Authorization"})]}),"\n",(0,a.jsxs)(t.li,{children:["Severity: ",(0,a.jsx)(t.code,{children:"Critical"})]}),"\n",(0,a.jsxs)(t.li,{children:["Detectors: ",(0,a.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/dynamic-instance-storage",children:(0,a.jsx)(t.code,{children:"dynamic-instance-storage"})})]}),"\n",(0,a.jsxs)(t.li,{children:["Test Cases: ",(0,a.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/dynamic-instance-storage/dynamic-instance-storage-1",children:(0,a.jsx)(t.code,{children:"dynamic-instance-storage-1"})})," ",(0,a.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/dynamic-instance-storage/dynamic-instance-storage-2",children:(0,a.jsx)(t.code,{children:"dynamic-instance-storage-2"})})," ",(0,a.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/dynamic-instance-storage/dynamic-instance-storage-3",children:(0,a.jsx)(t.code,{children:"dynamic-instance-storage-3"})})]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["In Rust, ",(0,a.jsx)(t.code,{children:"storage.persistent()"})," is useful for storing data shared among all users of a contract (e.g., a token administrator). However, using this macro with dynamic data structures (such as vectors, maps, etc.) is not recommended."]}),"\n",(0,a.jsx)(t.h2,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,a.jsxs)(t.p,{children:["Storing dynamic data with ",(0,a.jsx)(t.code,{children:"storage.persistent()"})," can lead to excessive storage consumption and increase the risk of DoS attacks on the contract."]}),"\n",(0,a.jsx)(t.h2,{id:"issue-example",children:"Issue example"}),"\n",(0,a.jsx)(t.p,{children:"Consider the following function:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'\n  pub fn store_vector(e: Env, data: Vec<i32>) {\n        e.storage()\n            .persistent()\n            .set(&Symbol::new(&e, "vector_data"), &data);\n    }\n\n'})}),"\n",(0,a.jsxs)(t.p,{children:["In this example, the function is storing a vector using ",(0,a.jsx)(t.code,{children:"storage.persistent()"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["The code example can be found ",(0,a.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/dynamic-instance-storage/dynamic-instance-storage-1/vulnerable-example",children:"here"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"remediated-example",children:"Remediated example"}),"\n",(0,a.jsx)(t.p,{children:"Consider the following function:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:" pub fn store_vector(e: Env, data: Vec<i32>) {\n        for (i, value) in data.iter().enumerate() {\n            let key = DataKey::VecElement(i as u32);\n            e.storage().persistent().set(&key, &value);\n        }\n    }\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Instead of using ",(0,a.jsx)(t.code,{children:"storage.persistent()"})," to store a vector in the storage, the data belonging to the vector can be stored directly in the storage."]}),"\n",(0,a.jsxs)(t.p,{children:["The remediated code example can be found ",(0,a.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/dynamic-instance-storage/dynamic-instance-storage-1/remediated-example",children:"here"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"how-is-it-detected",children:"How is it detected?"}),"\n",(0,a.jsxs)(t.p,{children:["Checks the usage of ",(0,a.jsx)(t.code,{children:"storage().persistent()"})," with dynamic types."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);