"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[841],{1020:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"detectors/substrate/missing-zero-check","title":"Missing Zero Check","description":"Description","source":"@site/docs/detectors/substrate/missing-zero-check.md","sourceDirName":"detectors/substrate","slug":"/detectors/substrate/missing-zero-check","permalink":"/scout-audit/docs/detectors/substrate/missing-zero-check","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/substrate/missing-zero-check.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Known vulnerabilities","permalink":"/scout-audit/docs/detectors/substrate/known-vulnerabilities"},"next":{"title":"Overflow-check","permalink":"/scout-audit/docs/detectors/substrate/overflow-check"}}');var i=t(5105),r=t(3881);const a={},c="Missing Zero Check",o={},l=[{value:"Description",id:"description",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Issue example",id:"issue-example",level:2},{value:"Remediated example",id:"remediated-example",level:2},{value:"How is it detected?",id:"how-is-it-detected",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"missing-zero-check",children:"Missing Zero Check"})}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Category: ",(0,i.jsx)(n.code,{children:"Best Practices"})]}),"\n",(0,i.jsxs)(n.li,{children:["Severity: ",(0,i.jsx)(n.code,{children:"Minor"})]}),"\n",(0,i.jsxs)(n.li,{children:["Detectors: ",(0,i.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-audit/blob/main/detectors/substrate-pallets/missing-zero-check/src/lib.rs",children:(0,i.jsx)(n.code,{children:"missing-zero-check"})})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Failing to check for a zero value in the parameters of a function may lead to unnecessary operations, potentially increasing resource usage and reducing the efficiency of the function"}),"\n",(0,i.jsx)(n.h2,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,i.jsx)(n.p,{children:"Failing to check if a Balance parameter is zero can lead to unintended side effects. For example, performing arithmetic operations with a zero balance might result in redundant storage writes or unnecessary event emissions."}),"\n",(0,i.jsx)(n.h2,{id:"issue-example",children:"Issue example"}),"\n",(0,i.jsxs)(n.p,{children:["Consider the following ",(0,i.jsx)(n.code,{children:"Substrate pallet"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'type BalanceOf<T> =\n    <<T as Config>::Currency as Currency<<T as frame_system::Config>::AccountId>>::Balance;\n\npub fn set_balance(origin: OriginFor<T>, amount: BalanceOf<T>) -> DispatchResult {\n    let who = ensure_signed(origin)?;\n    let amount_u32: u32 = amount.try_into().unwrap_or(u32::MAX);\n    let sender_balance = Self::balance_of(&who);\n\n    ensure!(sender_balance >= amount_u32, "Insufficient balance");\n\n    Self::deposit_event(Event::BalanceSet { who, value: amount });\n    Ok(())\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"In this pallet, the set_balance function receives amount as a parameter, but it never checks if amount is zero."}),"\n",(0,i.jsx)(n.h2,{id:"remediated-example",children:"Remediated example"}),"\n",(0,i.jsx)(n.p,{children:"Check if the parameter can be zero"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'pub fn set_balance(origin: OriginFor<T>, amount: BalanceOf<T>) -> DispatchResult {\n    let who = ensure_signed(origin)?;\n    let sender_balance = Self::balance_of(&who);\n    let amount_u32: u32 = amount.try_into().unwrap_or(u32::MAX);\n    ensure!(sender_balance >= amount_u32, "Insufficient balance");\n\n    if amount == Zero::zero() {\n        return Err(Error::<T>::ZeroBalance.into());\n    }\n    Self::deposit_event(Event::BalanceSet { who, value: amount });\n    Ok(())\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"how-is-it-detected",children:"How is it detected?"}),"\n",(0,i.jsx)(n.p,{children:"This detector operates in three stages."}),"\n",(0,i.jsxs)(n.p,{children:["HIR Analysis (",(0,i.jsx)(n.code,{children:"EarlyLintPass"}),"): In this stage, the detector analyzes the contract\u2019s functions using the HIR representation. It identifies and stores all ",(0,i.jsx)(n.code,{children:"extrinsic"})," functions in a vector of structs, allowing it to filter out cases where the vulnerability is not relevant."]}),"\n",(0,i.jsxs)(n.p,{children:["MIR Analysis (",(0,i.jsx)(n.code,{children:"LateLintPass"}),"): Here, the detector examines the MIR representation, checking whether any function parameter is of type ",(0,i.jsx)(n.code,{children:"Balance"}),". If such a parameter is found, it is stored in a struct. The detector then looks for expressions that compare this variable with zero. If found, the parameter is removed from the struct, otherwise, it remains unchanged."]}),"\n",(0,i.jsxs)(n.p,{children:["Final Check (",(0,i.jsx)(n.code,{children:"check_crate_post"}),"): After all detections have completed, this stage reviews the stored Balance parameters and issues a warning for each remaining one."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},3881:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(8101);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);