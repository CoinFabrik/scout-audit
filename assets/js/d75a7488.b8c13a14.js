"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5919],{3774:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var s=r(6672);const t={},a=s.createContext(t);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}},5411:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"detectors/soroban/unsafe-unwrap","title":"Unsafe unwrap","description":"Description","source":"@site/docs/detectors/soroban/2-unsafe-unwrap.md","sourceDirName":"detectors/soroban","slug":"/detectors/soroban/unsafe-unwrap","permalink":"/scout-audit/docs/detectors/soroban/unsafe-unwrap","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/soroban/2-unsafe-unwrap.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Divide before multiply","permalink":"/scout-audit/docs/detectors/soroban/divide-before-multiply"},"next":{"title":"Unsafe expect","permalink":"/scout-audit/docs/detectors/soroban/unsafe-expect"}}');var t=r(3420),a=r(3774);const o={},i="Unsafe unwrap",c={},u=[{value:"Description",id:"description",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Issue example",id:"issue-example",level:2},{value:"Remediated example",id:"remediated-example",level:2},{value:"How is it detected?",id:"how-is-it-detected",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"unsafe-unwrap",children:"Unsafe unwrap"})}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Category: ",(0,t.jsx)(n.code,{children:"Validations and error handling"})]}),"\n",(0,t.jsxs)(n.li,{children:["Severity: ",(0,t.jsx)(n.code,{children:"Minor"})]}),"\n",(0,t.jsxs)(n.li,{children:["Detectors: ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/unsafe-unwrap",children:(0,t.jsx)(n.code,{children:"unsafe-unwrap"})})]}),"\n",(0,t.jsxs)(n.li,{children:["Test Cases: ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-1",children:(0,t.jsx)(n.code,{children:"unsafe-unwrap-1"})})," ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-2",children:(0,t.jsx)(n.code,{children:"unsafe-unwrap-2"})})," ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-3",children:(0,t.jsx)(n.code,{children:"unsafe-unwrap-3"})}),"  ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-4",children:(0,t.jsx)(n.code,{children:"unsafe-unwrap-4"})}),"  ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-5",children:(0,t.jsx)(n.code,{children:"unsafe-unwrap-5"})}),"  ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-6",children:(0,t.jsx)(n.code,{children:"unsafe-unwrap-6"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In Rust, the ",(0,t.jsx)(n.code,{children:"unwrap"})," method is commonly used for error handling. It retrieves the inner value of an ",(0,t.jsx)(n.code,{children:"Option"})," or ",(0,t.jsx)(n.code,{children:"Result"}),". If an error or ",(0,t.jsx)(n.code,{children:"None"})," occurs, it calls ",(0,t.jsx)(n.code,{children:"panic!"})," without a custom error message."]}),"\n",(0,t.jsx)(n.h2,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".unwrap()"})," might panic if the result value is an error or ",(0,t.jsx)(n.code,{children:"None"}),". It is recommended to avoid the panic of a contract because it stops its execution, which might lead the contract to an inconsistent state if the panic occurs in the middle of state changes. Additionally, the panic could cause a transaction to fail."]}),"\n",(0,t.jsx)(n.h2,{id:"issue-example",children:"Issue example"}),"\n",(0,t.jsxs)(n.p,{children:["Consider the following ",(0,t.jsx)(n.code,{children:"Soroban"})," contract:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"#[contractimpl]\nimpl UnsafeUnwrap {\n    pub fn unwrap(n: u64) -> u64 {\n        let result = Self::non_zero_or_error(n);\n        result.unwrap()\n    }\n\n    pub fn non_zero_or_error(n: u64) -> Result<u64, Error> {\n        if n == 0 {\n            return Err(Error::CustomError);\n        }\n        Ok(n)\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this contract, the ",(0,t.jsx)(n.code,{children:"unwrap"})," function uses the ",(0,t.jsx)(n.code,{children:"unwrap"})," method to save the result of the ",(0,t.jsx)(n.code,{children:"non_zero_or_error"})," function. If the function returns ",(0,t.jsx)(n.code,{children:"Err"}),", the contract will panic and halt execution, potentially leading to malicious exploitation to disrupt the contract's operation."]}),"\n",(0,t.jsxs)(n.p,{children:["The code example can be found ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-1/vulnerable-example",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"remediated-example",children:"Remediated example"}),"\n",(0,t.jsxs)(n.p,{children:["Instead of using ",(0,t.jsx)(n.code,{children:"unwrap"}),", use a safer method for error handling. In this case, if the function returns ",(0,t.jsx)(n.code,{children:"Err"}),", it will return a default value (like ",(0,t.jsx)(n.code,{children:"0"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"#[contractimpl]\nimpl UnsafeUnwrap {\n    pub fn unwrap_or_default(n: u64) -> u64 {\n        let result = Self::non_zero_or_error(n);\n        result.unwrap_or(0)\n    }\n\n    pub fn non_zero_or_error(n: u64) -> Result<u64, Error> {\n        if n == 0 {\n            return Err(Error::CustomError);\n        }\n        Ok(n)\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The remediated code example can be found ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-1/remediated-example",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"how-is-it-detected",children:"How is it detected?"}),"\n",(0,t.jsx)(n.p,{children:"Checks for usage of .unwrap()"}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.a,{href:"https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap",children:["Rust documentation: ",(0,t.jsx)(n.code,{children:"unwrap"})]})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);