"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7085],{990:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"detectors/ink/unused-return-enum","title":"Unused return enum","description":"What it does","source":"@site/docs/detectors/ink/5-unused-return-enum.md","sourceDirName":"detectors/ink","slug":"/detectors/ink/unused-return-enum","permalink":"/scout-audit/docs/detectors/ink/unused-return-enum","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/ink/5-unused-return-enum.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Panic error","permalink":"/scout-audit/docs/detectors/ink/panic-error"},"next":{"title":"DoS unbounded operation","permalink":"/scout-audit/docs/detectors/ink/dos-unbounded-operation"}}');var s=t(5105),a=t(6755);const i={},o="Unused return enum",d={},u=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Known problems",id:"known-problems",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"unused-return-enum",children:"Unused return enum"})}),"\n",(0,s.jsx)(n.h3,{id:"what-it-does",children:"What it does"}),"\n",(0,s.jsx)(n.p,{children:"It warns if a function that returns a Result type does not return the Result enum variant (Ok/Err)."}),"\n",(0,s.jsx)(n.h3,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,s.jsx)(n.p,{children:"If any of the variants (Ok/Err) is not used, the code could be simplified or it could imply a bug."}),"\n",(0,s.jsx)(n.h3,{id:"known-problems",children:"Known problems"}),"\n",(0,s.jsxs)(n.p,{children:["If definitions of ",(0,s.jsx)(n.code,{children:"Err()"})," and/or ",(0,s.jsx)(n.code,{children:"Ok()"})," are in the code but do not flow to the return value due to the definition of a variable or because they are defined in a dead code block, the warning will not be shown. If the definitions are made in an auxiliary method, the warning will be shown, resulting in a false positive."]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"Instead of using:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// example code that does not raise a warning\n    #![cfg_attr(not(feature = "std"), no_std)]\n    pub enum TradingPairErrors {\n        Overflow,\n    }\n\n    #[ink(message)]\n    pub fn get_percentage_difference(&mut self, value1: Balance, value2: Balance) -> Result<Balance, TradingPairErrors>  {\n        let absolute_difference = value1.abs_diff(value2);\n        let sum = value1 + value2;\n        let percentage_difference =\n        match 100u128.checked_mul(absolute_difference / sum) {\n           Some(result) => Ok(result),\n           None => panic!("overflow!"),\n        };\n        return Err(TradingPairErrors::Overflow);\n    }\n'})}),"\n",(0,s.jsx)(n.p,{children:"Use this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'    #![cfg_attr(not(feature = "std"), no_std)]\n    pub enum TradingPairErrors {\n        Overflow,\n    }\n\n    #[ink(message)]\n    pub fn get_percentage_difference(&mut self, value1: Balance, value2: Balance) -> Result<Balance, TradingPairErrors>  {\n        let absolute_difference = value1.abs_diff(value2);\n        let sum = value1 + value2;\n        let percentage_difference =\n        match 100u128.checked_mul(absolute_difference / sum) {\n           Some(result) => result,\n           None => Err(TradingPairErrors::Overflow),\n        }\n    }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsxs)(n.p,{children:["The detector's implementation can be found at ",(0,s.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout/tree/main/detectors/unused-return-enum",children:"this link"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},6755:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(8101);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);