"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6124],{3610:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"detectors/substrate/unsafe-unwrap","title":"Unsafe unwrap","description":"Description","source":"@site/docs/detectors/substrate/unsafe-unwrap.md","sourceDirName":"detectors/substrate","slug":"/detectors/substrate/unsafe-unwrap","permalink":"/scout-audit/docs/detectors/substrate/unsafe-unwrap","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/substrate/unsafe-unwrap.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Unsafe expect","permalink":"/scout-audit/docs/detectors/substrate/unsafe-expect"},"next":{"title":"Unsigned extrinsic","permalink":"/scout-audit/docs/detectors/substrate/unsigned-extrinsic"}}');var r=n(5105),i=n(6755);const a={},o="Unsafe unwrap",l={},c=[{value:"Description",id:"description",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Issue example",id:"issue-example",level:2},{value:"Remediated example",id:"remediated-example",level:2},{value:"How is it detected?",id:"how-is-it-detected",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"unsafe-unwrap",children:"Unsafe unwrap"})}),"\n",(0,r.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Category: ",(0,r.jsx)(t.code,{children:"Validations and error handling"})]}),"\n",(0,r.jsxs)(t.li,{children:["Severity: ",(0,r.jsx)(t.code,{children:"Minor"})]}),"\n",(0,r.jsxs)(t.li,{children:["Detectors: ",(0,r.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout-audit/blob/main/detectors/substrate-pallets/unsafe-unwrap/src/lib.rs",children:(0,r.jsx)(t.code,{children:"unsafe-unwrap"})})]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["In Rust, the ",(0,r.jsx)(t.code,{children:"unwrap"})," method is commonly used for error handling. It retrieves the inner value of an ",(0,r.jsx)(t.code,{children:"Option"})," or ",(0,r.jsx)(t.code,{children:"Result"}),". If an error or ",(0,r.jsx)(t.code,{children:"None"})," occurs, it calls ",(0,r.jsx)(t.code,{children:"panic!"})," without a custom error message."]}),"\n",(0,r.jsx)(t.h2,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:".unwrap()"})," might panic if the result value is an error or ",(0,r.jsx)(t.code,{children:"None"}),". It is recommended to avoid the panic of a pallet because it stops its execution, which might lead the pallets to an inconsistent state if the panic occurs in the middle of state changes. Additionally, the panic could cause a transaction to fail."]}),"\n",(0,r.jsx)(t.h2,{id:"issue-example",children:"Issue example"}),"\n",(0,r.jsxs)(t.p,{children:["Consider the following ",(0,r.jsx)(t.code,{children:"Substrate pallet"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:"#[pallet::call_index(0)]\n        pub fn unsafe_get_storage(origin: OriginFor<T>) -> DispatchResult {\n            let who = ensure_signed(origin)?;\n            let value = ExampleStorage::<T>::get().unwrap();\n            Self::deposit_event(Event::UnsafeGetStorage { who, value });\n            Ok(())\n        }\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In this example, the ",(0,r.jsx)(t.code,{children:"unsafe_get_storage"})," function uses the ",(0,r.jsx)(t.code,{children:"unwrap"})," method to save the result of the ",(0,r.jsx)(t.code,{children:"ExampleStorage"})," struct. If the function returns ",(0,r.jsx)(t.code,{children:"Err"}),", the contract will panic and halt execution, potentially leading to malicious exploitation to disrupt the contract's operation."]}),"\n",(0,r.jsx)(t.h2,{id:"remediated-example",children:"Remediated example"}),"\n",(0,r.jsxs)(t.p,{children:["Instead of using ",(0,r.jsx)(t.code,{children:"unwrap"}),", use a safer method for error handling like ",(0,r.jsx)(t.code,{children:"unwrap_or_default"}),", or ensure that ",(0,r.jsx)(t.code,{children:".get()"})," is always ",(0,r.jsx)(t.code,{children:"some"})," by adding a conditional."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:"#[pallet::call_index(0)]\n        pub fn unsafe_get_storage(origin: OriginFor<T>) -> DispatchResult {\n            let who = ensure_signed(origin)?;\n            let value = ExampleStorage::<T>::get().unwrap_or_default();\n            Self::deposit_event(Event::UnsafeGetStorage { who, value });\n            Ok(())\n        }\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:"#[pallet::call_index(0)]\n        pub fn unsafe_get_storage(origin: OriginFor<T>) -> DispatchResult {\n            let who = ensure_signed(origin)?;\n            let example_storage = ExampleStorage::<T>::get();\n            if example_storage.is_none() {\n                return Err(Error::<T>::NotInitialized.into());\n            }\n            let value = example_storage.unwrap();\n            Self::deposit_event(Event::UnsafeGetStorage { who, value });\n            Ok(())\n        }\n"})}),"\n",(0,r.jsx)(t.h2,{id:"how-is-it-detected",children:"How is it detected?"}),"\n",(0,r.jsx)(t.p,{children:"Checks for usage of .unwrap()"})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},6755:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(8101);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);