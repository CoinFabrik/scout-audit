"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9453],{2022:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"detectors/ink/zero-or-test-address","title":"Zero or test address","description":"What it does","source":"@site/docs/detectors/ink/12-zero-or-test-address.md","sourceDirName":"detectors/ink","slug":"/detectors/ink/zero-or-test-address","permalink":"/docs/detectors/ink/zero-or-test-address","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/ink/12-zero-or-test-address.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Delegate call","permalink":"/docs/detectors/ink/delegate-call"},"next":{"title":"Insuficciently random values","permalink":"/docs/detectors/ink/insufficiently-random-values"}}');var r=n(5105),d=n(6755);const o={},i="Zero or test address",a={},c=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"zero-or-test-address",children:"Zero or test address"})}),"\n",(0,r.jsx)(t.h3,{id:"what-it-does",children:"What it does"}),"\n",(0,r.jsx)(t.p,{children:"Checks whether the zero address is being inputed to a function without validation."}),"\n",(0,r.jsx)(t.h3,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,r.jsx)(t.p,{children:"Because the private key for the zero address is known, anyone could take ownership of the contract."}),"\n",(0,r.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:"#[ink(message)]\npub fn modify_admin(&mut self, admin: AccountId) -> Result<AccountId, Error> {\n    if self.admin != self.env().caller() {\n        return Err(Error::NotAuthorized);\n    }\n\n    self.admin = admin;\n    Ok(self.admin)\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"Use instead:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:"#[ink(message)]\npub fn modify_admin(&mut self, admin: AccountId) -> Result<AccountId, Error> {\n    if self.admin != self.env().caller() {\n        return Err(Error::NotAuthorized);\n    }\n\n    if admin == AccountId::from([0x0; 32]) {\n        return Err(Error::InvalidAddress);\n    }\n\n    self.admin = admin;\n    Ok(self.admin)\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsxs)(t.p,{children:["The detector's implementation can be found at ",(0,r.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout/tree/main/detectors/zero-or-test-address",children:"this link"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},6755:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(8101);const r={},d=s.createContext(r);function o(e){const t=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(d.Provider,{value:t},e.children)}}}]);