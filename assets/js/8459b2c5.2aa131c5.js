"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4241],{3456:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"detectors/ink/buffering-unsized-types","title":"Buffering Unsized Types","description":"What it does","source":"@site/docs/detectors/ink/25-buffering-unsized-types.md","sourceDirName":"detectors/ink","slug":"/detectors/ink/buffering-unsized-types","permalink":"/scout-audit/docs/detectors/ink/buffering-unsized-types","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/ink/25-buffering-unsized-types.md","tags":[],"version":"current","sidebarPosition":25,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Incorrect Exponentiation","permalink":"/scout-audit/docs/detectors/ink/incorrect-exponentiation"},"next":{"title":"Avoid Unsafe Block","permalink":"/scout-audit/docs/detectors/ink/avoid-unsafe-block"}}');var i=n(5105),r=n(6755);const a={},o="Buffering Unsized Types",c={},d=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"buffering-unsized-types",children:"Buffering Unsized Types"})}),"\n",(0,i.jsx)(t.h3,{id:"what-it-does",children:"What it does"}),"\n",(0,i.jsxs)(t.p,{children:["It checks for the correct use of fallible methods when reading/writing data into ",(0,i.jsx)(t.code,{children:"StorageVec"})," type variables."]}),"\n",(0,i.jsx)(t.h3,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"StorageVec"})," is a Lazy type. Hence the static buffer to store the encoded data is of limited size. Because of that, reading/writing methods can fail and trap the contract."]}),"\n",(0,i.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:'    #[ink(message)]\n    pub fn do_something(&mut self, data: String) {\n        let caller = self.env().caller();\n\n        let example = format!("{caller:?}: {data}");\n\n        // Panics if data overgrows the static buffer size!\n        self.on_chain_log.insert(caller, &example);\n    }\n'})}),"\n",(0,i.jsx)(t.p,{children:"Use instead:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"    #[ink(message)]\n        pub fn do_something2(&mut self, data: String) -> Result<(), Error> {\n            let caller = self.env().caller();\n\n            match self.on_chain_log.try_insert(caller, &data) {\n                Ok(_) => Ok(()),\n                Err(_) => Err(Error::InsertFailed),\n            }\n        }\n"})}),"\n",(0,i.jsx)(t.h3,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsxs)(t.p,{children:["The detector's implementation can be found at ",(0,i.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout/blob/main/detectors/buffering-unsized-types",children:"this link"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},6755:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(8101);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);