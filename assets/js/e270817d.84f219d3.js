"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3343],{2859:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"detectors/substrate/incorrect-exponentiation","title":"Incorrect exponentiation","description":"Description","source":"@site/docs/detectors/substrate/incorrect-exponentiation.md","sourceDirName":"detectors/substrate","slug":"/detectors/substrate/incorrect-exponentiation","permalink":"/scout-audit/docs/detectors/substrate/incorrect-exponentiation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/substrate/incorrect-exponentiation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Equal addresses","permalink":"/scout-audit/docs/detectors/substrate/equal-addresses"},"next":{"title":"Integer overflow or underflow","permalink":"/scout-audit/docs/detectors/substrate/integer-overflow-or-underflow"}}');var s=n(5105),o=n(6755);const r={},a="Incorrect exponentiation",c={},d=[{value:"Description",id:"description",level:2},{value:"Why is it bad?",id:"why-is-it-bad",level:2},{value:"Issue example",id:"issue-example",level:2},{value:"Remediated example",id:"remediated-example",level:2},{value:"How is it detected?",id:"how-is-it-detected",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"incorrect-exponentiation",children:"Incorrect exponentiation"})}),"\n",(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Issue Category: ",(0,s.jsx)(t.code,{children:"Arithmetic"})]}),"\n",(0,s.jsxs)(t.li,{children:["Issue Severity: ",(0,s.jsx)(t.code,{children:"Critical"})]}),"\n",(0,s.jsxs)(t.li,{children:["Detectors: ",(0,s.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout-audit/blob/main/detectors/rust/incorrect-exponentiation/src/lib.rs",children:(0,s.jsx)(t.code,{children:"incorrect-exponentiation"})})]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The operator ",(0,s.jsx)(t.code,{children:"^"})," is not an exponential operator, it is a bitwise XOR. Make sure to use ",(0,s.jsx)(t.code,{children:"pow()"})," instead for exponentiation. In case of performing a XOR operation, use ",(0,s.jsx)(t.code,{children:".bitxor()"})," for clarity."]}),"\n",(0,s.jsx)(t.h2,{id:"why-is-it-bad",children:"Why is it bad?"}),"\n",(0,s.jsx)(t.p,{children:"It can produce unexpected behaviour in the smart contract."}),"\n",(0,s.jsx)(t.h2,{id:"issue-example",children:"Issue example"}),"\n",(0,s.jsxs)(t.p,{children:["In the following example, the ",(0,s.jsx)(t.code,{children:"^"})," operand is being used for exponentiation. But in Rust, ",(0,s.jsx)(t.code,{children:"^"})," is the operand for an XOR operation. If misused, this could lead to unexpected behaviour in our contract."]}),"\n",(0,s.jsxs)(t.p,{children:["Consider the following ",(0,s.jsx)(t.code,{children:"Substrate pallet"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:"#[pallet::call_index(0)]\n        pub fn set_balance(origin: OriginFor<T>, new_value: u32) -> DispatchResult {\n            let who = ensure_signed(origin)?;\n            let calculated_value = new_value ^ 3;\n            Value::<T>::put(calculated_value);\n            Self::deposit_event(Event::BalanceSet {\n                who,\n                value: calculated_value,\n            });\n            Ok(())\n        }\n"})}),"\n",(0,s.jsx)(t.h2,{id:"remediated-example",children:"Remediated example"}),"\n",(0,s.jsxs)(t.p,{children:["A possible solution is to use the method ",(0,s.jsx)(t.code,{children:"pow()"}),". But, if a XOR operation is wanted, ",(0,s.jsx)(t.code,{children:".bitxor()"})," method is recommended."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:"#[pallet::call_index(0)]\npub fn set_balance(origin: OriginFor<T>, new_value: u32) -> DispatchResult {\nlet who = ensure_signed(origin)?;\nlet calculated_value = new_value.pow(3);\nValue::<T>::put(calculated_value);\nSelf::deposit_event(Event::BalanceSet {\nwho,\nvalue: calculated_value,\n});\nOk(())\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"how-is-it-detected",children:"How is it detected?"}),"\n",(0,s.jsxs)(t.p,{children:["Warns about ",(0,s.jsx)(t.code,{children:"^"})," being a ",(0,s.jsx)(t.code,{children:"bit XOR"})," operation instead of an exponentiation."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},6755:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(8101);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);