"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9881],{3774:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>u});var s=r(6672);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},5746:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>u,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"detectors/soroban/unused-return-enum","title":"Unused return enum","description":"Description","source":"@site/docs/detectors/soroban/13-unused-return-enum.md","sourceDirName":"detectors/soroban","slug":"/detectors/soroban/unused-return-enum","permalink":"/scout-audit/docs/detectors/soroban/unused-return-enum","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/soroban/13-unused-return-enum.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Soroban version","permalink":"/scout-audit/docs/detectors/soroban/soroban-version"},"next":{"title":"Iterators over indexing","permalink":"/scout-audit/docs/detectors/soroban/iterators-over-indexing"}}');var t=r(3420),i=r(3774);const a={},u="Unused return enum",o={},d=[{value:"Description",id:"description",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Issue example",id:"issue-example",level:2},{value:"Remediated example",id:"remediated-example",level:2},{value:"How is it detected?",id:"how-is-it-detected",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"unused-return-enum",children:"Unused return enum"})}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Issue Category: ",(0,t.jsx)(n.code,{children:"Validations and error handling"})]}),"\n",(0,t.jsxs)(n.li,{children:["Issue Severity: ",(0,t.jsx)(n.code,{children:"Minor"})]}),"\n",(0,t.jsxs)(n.li,{children:["Detectors: ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/unused-return-enum",children:(0,t.jsx)(n.code,{children:"unused-return-enum"})})]}),"\n",(0,t.jsxs)(n.li,{children:["Test Cases: ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unused-return-enum/unused-return-enum-1",children:(0,t.jsx)(n.code,{children:"unused-return-enum-1"})})," ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unused-return-enum/unused-return-enum-2",children:(0,t.jsx)(n.code,{children:"unused-return-enum-2"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Soroban messages can return a ",(0,t.jsx)(n.code,{children:"Result"})," enum with a custom error type. This is useful for the caller to know what went wrong when the message fails."]}),"\n",(0,t.jsxs)(n.p,{children:["The definition in Rust of the ",(0,t.jsx)(n.code,{children:"Result"})," enum is:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,t.jsxs)(n.p,{children:["If either variant (",(0,t.jsx)(n.code,{children:"Ok"})," or ",(0,t.jsx)(n.code,{children:"Err"}),") is not used in the code, it could indicate that the ",(0,t.jsx)(n.code,{children:"Result"})," type is unnecessary and that the code could be simplified. Alternatively, it might suggest a bug where a possible outcome is not being handled properly."]}),"\n",(0,t.jsx)(n.h2,{id:"issue-example",children:"Issue example"}),"\n",(0,t.jsxs)(n.p,{children:["Consider the following ",(0,t.jsx)(n.code,{children:"Soroban"})," contract:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord)]\n#[repr(u32)]\npub enum Error {\n    /// An overflow was produced.\n    Overflow = 1,\n}\n\n\n\npub fn get_percentage_difference(balance1: u128, balance2: u128) -> Result<u128, Error> {\n        let absolute_difference = balance1.abs_diff(balance2);\n        let sum = balance1 + balance2;\n\n        match 100u128.checked_mul(absolute_difference / sum) {\n            Some(result) => result,\n            None => panic!("Overflow"),\n        };\n\n        Err(Error::Overflow)\n    }\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(n.code,{children:"Soroban"})," message that returns the percentage difference between two values."]}),"\n",(0,t.jsxs)(n.p,{children:["The function then returns an error enum variant ",(0,t.jsx)(n.code,{children:"TradingPairErrors::Overflow"}),".\nHowever, the function never returns a ",(0,t.jsx)(n.code,{children:"Result"})," enum variant ",(0,t.jsx)(n.code,{children:"Ok"}),", thus always\nfailing."]}),"\n",(0,t.jsxs)(n.p,{children:["The vulnerable code example can be found ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unused-return-enum/unused-return-enum-1/remediated-example",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"remediated-example",children:"Remediated example"}),"\n",(0,t.jsxs)(n.p,{children:["This function could be easily fixed by returning a ",(0,t.jsx)(n.code,{children:"Result"})," enum variant ",(0,t.jsx)(n.code,{children:"Ok"}),"\nwhen the percentage difference is calculated successfully. By providing a check in\nthe linter that ensures that all the variants of the ",(0,t.jsx)(n.code,{children:"Result"})," enum are used, this\nbug could have been avoided. This is shown in the example below:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord)]\n#[repr(u32)]\npub enum Error {\n    /// An overflow was produced.\n    Overflow = 1,\n}\n\n\npub fn get_percentage_difference(balance1: u128, balance2: u128) -> Result<u128, Error> {\n        let absolute_difference = balance1.abs_diff(balance2);\n        let sum = balance1 + balance2;\n\n        match 100u128.checked_mul(absolute_difference / sum) {\n            Some(result) => Ok(result),\n            None => Err(Error::Overflow),\n        }\n    }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The remediated code example can be found ",(0,t.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unused-return-enum//unused-return-enum-1/remediated-example",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"how-is-it-detected",children:"How is it detected?"}),"\n",(0,t.jsx)(n.p,{children:"It warns if a function that returns a Result type does not return the Result enum variant (Ok/Err)."})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);