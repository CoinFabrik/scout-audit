"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3181],{3774:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(6672);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},9343:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"detectors/ink/integer-overflow-or-underflow","title":"Integer overflow or underflow","description":"What it does","source":"@site/docs/detectors/ink/1-integer-overflow-or-underflow.md","sourceDirName":"detectors/ink","slug":"/detectors/ink/integer-overflow-or-underflow","permalink":"/scout-audit/docs/detectors/ink/integer-overflow-or-underflow","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/ink/1-integer-overflow-or-underflow.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Ink","permalink":"/scout-audit/docs/category/ink"},"next":{"title":"Set contract storage","permalink":"/scout-audit/docs/detectors/ink/set-contract-storage"}}');var o=t(3420),i=t(3774);const s={},c="Integer overflow or underflow",a={},l=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Known problems",id:"known-problems",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"integer-overflow-or-underflow",children:"Integer overflow or underflow"})}),"\n",(0,o.jsx)(n.h3,{id:"what-it-does",children:"What it does"}),"\n",(0,o.jsxs)(n.p,{children:["Checks for integer arithmetic operations which could overflow or panic.\nSpecifically, checks for any operators (",(0,o.jsx)(n.code,{children:"+"}),", ",(0,o.jsx)(n.code,{children:"-"}),", ",(0,o.jsx)(n.code,{children:"*"}),", ",(0,o.jsx)(n.code,{children:"<<"}),", etc) which are capable\nof overflowing according to the ",(0,o.jsx)(n.a,{href:"https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow",children:"Rust\nReference"}),",\nor which can panic (",(0,o.jsx)(n.code,{children:"/"}),", ",(0,o.jsx)(n.code,{children:"%"}),"). No bounds analysis or sophisticated reasoning is\nattempted."]}),"\n",(0,o.jsx)(n.h3,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,o.jsx)(n.p,{children:"Integer overflow will trigger a panic in debug builds or will wrap in\nrelease mode. Division by zero will cause a panic in either mode. In some applications one\nwants explicitly checked, wrapping or saturating arithmetic."}),"\n",(0,o.jsx)(n.h3,{id:"known-problems",children:"Known problems"}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"let a = 0;\nlet b = a + 1;\n"})}),"\n",(0,o.jsx)(n.p,{children:"Use instead:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"let a = 0;\nlet b = a.checked_add(1).ok_or(Error::OverflowDetected)?;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,o.jsxs)(n.p,{children:["The detector's implementation can be found at ",(0,o.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout/tree/main/detectors/integer-overflow-or-underflow",children:"this link"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);