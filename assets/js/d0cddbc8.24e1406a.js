"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8805],{4570:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"detectors/substrate/iterators-over-indexing","title":"Iterators over indexing","description":"Description","source":"@site/docs/detectors/substrate/iterators-over-indexing.md","sourceDirName":"detectors/substrate","slug":"/detectors/substrate/iterators-over-indexing","permalink":"/scout-audit/docs/detectors/substrate/iterators-over-indexing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/substrate/iterators-over-indexing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Invalid extrinsic weight","permalink":"/scout-audit/docs/detectors/substrate/invalid-extrinsic-weight"},"next":{"title":"Known vulnerabilities","permalink":"/scout-audit/docs/detectors/substrate/known-vulnerabilities"}}');var s=n(5105),r=n(6755);const o={},d="Iterators over indexing",a={},c=[{value:"Description",id:"description",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Issue Example",id:"issue-example",level:3},{value:"Remediated example",id:"remediated-example",level:3},{value:"How is it detected?",id:"how-is-it-detected",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"iterators-over-indexing",children:"Iterators over indexing"})}),"\n",(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Issue Category: ",(0,s.jsx)(t.code,{children:"Arithmetic"})]}),"\n",(0,s.jsxs)(t.li,{children:["Issue Severity: ",(0,s.jsx)(t.code,{children:"Medium"})]}),"\n",(0,s.jsxs)(t.li,{children:["Detectors: ",(0,s.jsx)(t.a,{href:"https://github.com/CoinFabrik/scout-audit/blob/main/detectors/substrate-pallets/iterators-over-indexing/src/lib.rs",children:(0,s.jsx)(t.code,{children:"iterators-over-indexing"})})]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["It warns if a ",(0,s.jsx)(t.code,{children:"for"})," loop uses indexing instead of an iterator. If the indexing explicitly ends at ",(0,s.jsx)(t.code,{children:".len()"}),", the lint will not trigger."]}),"\n",(0,s.jsx)(t.h3,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,s.jsx)(t.p,{children:"Accessing a vector by index is slower than using an iterator. This is because iterators are optimized for sequential access, avoiding repeated bounds-checking at runtime. Also, if the index is out of bounds it will cause the program to panic, potentially leading to runtime errors"}),"\n",(0,s.jsx)(t.h3,{id:"issue-example",children:"Issue Example"}),"\n",(0,s.jsx)(t.p,{children:"Consider the following substrate pallet:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:"#[pallet::call_index(1)]\npub fn set_sum(origin: OriginFor<T>) -> DispatchResult {\n    let _sender = ensure_signed(origin)?;\n\n    let mut new_sum = 0_u32;\n\n    if let Some(v) = <Dummy<T>>::get() {\n        for i in 0..128 {\n            new_sum += v[i];\n        }\n    }\n\n    <Sum<T>>::mutate(|sum| {\n        *sum = Some(new_sum);\n    });\n\n    Ok(())\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"The provided function contains a for loop that uses indexing to access elements of the v vector."}),"\n",(0,s.jsx)(t.h3,{id:"remediated-example",children:"Remediated example"}),"\n",(0,s.jsx)(t.p,{children:"Consider using an iterator to iterate over the array"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:"pub fn set_sum(origin: OriginFor<T>) -> DispatchResult {\n            let _sender = ensure_signed(origin)?;\n\n            let mut new_sum = 0;\n\n            if let Some(v) = <Dummy<T>>::get() {\n                for i in v.iter() {\n                    new_sum += i;\n                }\n            }\n\n            <Sum<T>>::mutate(|sum| {\n                *sum = Some(new_sum);\n            });\n\n            Ok(())\n        }\n"})}),"\n",(0,s.jsx)(t.h2,{id:"how-is-it-detected",children:"How is it detected?"}),"\n",(0,s.jsxs)(t.p,{children:["Find expressions inside the function that call some method that has te name ",(0,s.jsx)(t.code,{children:"get"})," and checks how the for loop is used, if it's used without an iterator, thorws a warning"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},6755:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>d});var i=n(8101);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);