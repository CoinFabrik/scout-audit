"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4069],{3881:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(8101);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},5163:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"detectors/ink/insufficiently-random-values","title":"Insuficciently random values","description":"What it does","source":"@site/docs/detectors/ink/13-insufficiently-random-values.md","sourceDirName":"detectors/ink","slug":"/detectors/ink/insufficiently-random-values","permalink":"/scout-audit/docs/detectors/ink/insufficiently-random-values","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/detectors/ink/13-insufficiently-random-values.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Zero or test address","permalink":"/scout-audit/docs/detectors/ink/zero-or-test-address"},"next":{"title":"Unrestricted Transfer From","permalink":"/scout-audit/docs/detectors/ink/unrestricted-transfer-from"}}');var r=t(5105),i=t(3881);const a={},o="Insuficciently random values",d={},c=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"insuficciently-random-values",children:"Insuficciently random values"})}),"\n",(0,r.jsx)(n.h3,{id:"what-it-does",children:"What it does"}),"\n",(0,r.jsxs)(n.p,{children:["Checks the usage of ",(0,r.jsx)(n.code,{children:"block_timestamp"})," or ",(0,r.jsx)(n.code,{children:"block_number"})," for generation of random numbers."]}),"\n",(0,r.jsx)(n.h3,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,r.jsxs)(n.p,{children:["Using ",(0,r.jsx)(n.code,{children:"block_timestamp"})," is not recommended because it could be potentially manipulated by validator. On the other hand, ",(0,r.jsx)(n.code,{children:"block_number"})," is publicly available, an attacker could predict the random number to be generated."]}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"#[ink(message, payable)]\npub fn bet_single(&mut self, number: u8) -> Result<bool> {\n    let inputs = self.check_inputs(36, 0, 36, number);\n    if inputs.is_err() {\n        return Err(inputs.unwrap_err());\n    }\n\n    let pseudo_random: u8 = (self.env().block_number() % 37).try_into().unwrap();\n    if pseudo_random == number {\n        return self\n            .env()\n            .transfer(self.env().caller(), self.env().transferred_value() * 36)\n            .map(|_| true)\n            .map_err(|_e| Error::TransferFailed);\n    }\n    return Ok(false);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Avoid using block attributes like ",(0,r.jsx)(n.code,{children:"block_timestamp"})," or ",(0,r.jsx)(n.code,{children:"block_number"})," for randomness generation, and consider using oracles instead."]}),"\n",(0,r.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsxs)(n.p,{children:["The detector's implementation can be found at ",(0,r.jsx)(n.a,{href:"https://github.com/CoinFabrik/scout/tree/main/detectors/insufficiently-random-values",children:"this link"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);